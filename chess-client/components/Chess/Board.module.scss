@use "@/styles/colors";
@use "_/chess" as *;


$_boardSize: 8;


.board {
    --coordinateNamesSize: #{getCellSizeUnit(0.5)};

    display: grid;
    $template: $coordinateNamesSize calc($_boardSize * getCellSizeUnit(1)) $coordinateNamesSize;
    grid-template-rows: $template;
    grid-template-columns: $template;

    @at-root section#{&} {
        padding: 0;
    }
}


.boardCore {
    grid-area: 2 / 2;

    display: grid;
    $template: repeat($_boardSize, 1fr);
    grid-template-rows: $template;
    grid-template-columns: $template;

    outline: getCellSizeUnit(1 / 40) solid colors.$border;
}


$_basePieceTransition: var(--basePieceTransition);
$_pieceTransitionWithoutTranslate: var(--pieceTransitionWithoutTranslate);
$_pieceDropShadowSize: var(--pieceDropShadowSize);

.piece {
    --basePieceTransition: filter 250ms;
    --pieceTransitionWithoutTranslate: #{$_basePieceTransition};
    --pieceDropShadowSize: #{getCellSizeUnit(1 / 12)};

    grid-area: 1 / 1;

    touch-action: none;

    width: 100%;
    height: 100%;

    transition: $_pieceTransitionWithoutTranslate, translate 500ms;

    @for $x from 0 to $_boardSize {
        @for $y from 0 to $_boardSize {
            &#{$x}_#{$y} {
                translate: $x * 100% $y * 100%;
            }
        }
    }

    &:not(.inDragging):hover {
        filter: drop-shadow(0 0 $_pieceDropShadowSize crimson);
    }

    &:not(.interactable) {
        pointer-events: none;
    }
}

.interactable {
    cursor: grab;
}

.selected {
    filter: drop-shadow(0 0 $_pieceDropShadowSize green);
}

.inDragging {
    order: 2;

    cursor: grabbing;

    transition: $_pieceTransitionWithoutTranslate;
}

@property --kingStateColor {
    syntax: "<color>";
    inherits: true;
    initial-value: transparent;
}

.king {
    $kingStateColor: var(--kingStateColor);

    --pieceTransitionWithoutTranslate: #{$_basePieceTransition}, --kingStateColor 250ms;

    background-image: radial-gradient(
            closest-side,
            $kingStateColor 0%,
            rgb(from $kingStateColor calc(0.9 * r) calc(0.9 * g) calc(0.9 * b) / alpha) 65%,
            transparent 90%
    );
}

.shah {
    --kingStateColor: #ff5349;
}

.mate {
    --kingStateColor: red;
}

.stalemate {
    --kingStateColor: #e3c837;
}


%_buttonBase {
    composes: square from "@/styles/button.module.scss";

    place-self: center;
}

%_buttonOverrides {
    --buttonSize: 75%;

    border-width: getCellSizeUnit(1 / 80);
}

@mixin _button($gridRow, $gridColumn) {
    @extend %_buttonBase;

    @at-root button#{&} {
        @extend %_buttonOverrides;
    }

    grid-area: #{$gridRow} / #{$gridColumn};
}

.flipButton {
    @include _button(1, 3);
}

.topCenterButton {
    @include _button(1, 1);
}

.bottomCenterButton {
    @include _button(3, 1);
}

.flipImage, .centerImage {
    composes: image from "@/styles/button.module.scss";

    fill: colors.$primary;
}
