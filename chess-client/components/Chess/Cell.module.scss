@use "@/styles/colors";
@use "_/chess" as *;


%_cell {
    display: flex;
    justify-content: center;
    align-items: center;

    &:first-child {
        grid-area: 1 / 1;
    }

    &::before {
        $signSize: var(--signSize);

        content: "";

        display: block;

        width: $signSize;
        height: $signSize;

        border-color: transparent;
        border-radius: 50%;

        background-color: transparent;

        transition-duration: 250ms;
    }
}

@mixin _cell($color) {
    @extend %_cell;

    background-color: $color;
}

.white {
    @include _cell(gray);
}

.black {
    @include _cell(black);
}


%_baseSign {
    cursor: pointer;
}

$_signColor: var(--signColor);
$_signHover: ":is(:hover, .hover)";

%_defaultSign {
    @extend %_baseSign;

    &::before {
        --signSize: 50%;

        background-color: colors.setAlpha($_signColor, 0.5);

        transition-property: background-color;
    }

    &#{$_signHover}::before {
        background-color: colors.setAlpha($_signColor, 1);
    }
}

@mixin _defaultSign($color) {
    @extend %_defaultSign;

    &::before {
        --signColor: #{$color};
    }
}

.movement {
    @include _defaultSign(lightsteelblue);
}

.enPassant {
    @include _defaultSign(yellow);
}

.castling {
    @include _defaultSign(green);
}

.attack {
    @extend %_baseSign;

    &::before {
        --signSize: 90%;
        --signColor: red;

        box-sizing: border-box;

        border: getCellSizeUnit(1 / 12) solid colors.setAlpha($_signColor, 0.5);

        transition-property: border-color;
    }

    &#{$_signHover}::before {
        border-color: colors.setAlpha($_signColor, 1);
    }
}
